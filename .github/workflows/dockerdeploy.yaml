name: Build and deploy fastapi (DockerHub)

on:
    push:
        branches:
            - main


jobs:
    build-and-push_fastapi:
        runs-on: ubuntu-latest
        environment: production

        steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
        
        - name: Log in to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Build and push fastapi Docker image
          uses: docker/build-push-action@v5
          with:
            context: ./backend
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/donormate:latest
            cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/donormate:latest
            cache-to: type=inline
        
    build-and-push_bot:
        runs-on: ubuntu-latest
        environment: production

        steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
        
        - name: Log in to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Build and push bot Docker image
          uses: docker/build-push-action@v5
          with:
            context: ./bot
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/donormate_bot:latest
            cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/donormate_bot:latest
            cache-to: type=inline

    deploy:
        runs-on: ubuntu-latest
        needs: 
          - build-and-push_fastapi
          - build-and-push_bot
        environment: production
        
        steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
          
        - name: Telegram notification (start)
          env:
            BOT_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
            USER_IDS: "${{ secrets.TELEGRAM_CHAT_ID }}"
          run: |
            MESSAGE="Deploy starting"
            for USER_ID in $USER_IDS; do
                curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                -d chat_id="$USER_ID" \
                -d text="$MESSAGE"
            done
        
        - name: Archive docker-compose.yml and nginx.conf
          run: |
            ls
            tar -czf deploy.tar.gz -C config docker-compose.yml nginx.conf

        - name: Copy archive to server
          uses: appleboy/scp-action@v0.1.0
          with:
            host: ${{ secrets.SERVER_IP }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.SERVER_SSH_KEY }}
            port: 2536
            source: deploy.tar.gz
            target: /root/fastapi/

        - name: Extract and clean up on server
          uses: appleboy/ssh-action@v0.1.0
          with:
            host: ${{ secrets.SERVER_IP }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.SERVER_SSH_KEY }}
            port: 2536
            script: |
              cd /root/fastapi
              tar -xzf deploy.tar.gz
              rm deploy.tar.gz

        - name: Deploy on server via SSH
          uses: appleboy/ssh-action@v0.1.0
          with:
            host: ${{ secrets.SERVER_IP }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.SERVER_SSH_KEY }}
            port: 2536
            script: |
              set -e
              
              cd /root/fastapi
              docker stop $(docker ps -q) && docker rm $(docker ps -aq)
              
              docker pull asdfrewqha/donormate:latest
              docker pull asdfrewqha/donormate_bot:latest

              docker compose up -d --build --remove-orphans

        - name: Show container logs on failure
          if: failure()
          uses: appleboy/ssh-action@v0.1.0
          with:
            host: ${{ secrets.SERVER_IP }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.SERVER_SSH_KEY }}
            port: 2536
            script: |
              docker logs fastapi-container || echo "no fastapi logs"
              docker logs nginx-container || echo "no nginx logs"

        - name: Telegram notification (success)
          if: success()
          env:
            BOT_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
            USER_IDS: "${{ secrets.TELEGRAM_CHAT_ID }}"
          run: |
            MESSAGE="Deployment finished successfully"
            for USER_ID in $USER_IDS; do
              curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                -d chat_id="$USER_ID" \
                -d text="$MESSAGE"
            done

        - name: Telegram notification (fail)
          if: failure()
          env:
            BOT_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
            USER_IDS: "${{ secrets.TELEGRAM_CHAT_ID }}"
          run: |
            MESSAGE="Deployment failure:%0ARepo: $GITHUB_REPOSITORY%0ABranch: $GITHUB_REF_NAME%0AAuthor: $GITHUB_ACTOR%0ACheck workflow logs."
            for USER_ID in $USER_IDS; do
              curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                -d chat_id="$USER_ID" \
                -d text="$MESSAGE"
            done
              