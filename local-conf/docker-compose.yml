version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-container
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DBNAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DBNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bot_net

  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbit-container
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bot_net
  redis:
    image: redis:7-alpine
    container_name: redis-container
    volumes:
      - redis_data:/var/lib/redis/data
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --bind 0.0.0.0
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bot_net
  flower:
    image: mher/flower
    container_name: flower-container
    ports:
      - "5555:5555"
    volumes:
      - ./wait-for.sh:/wait-for.sh
    entrypoint:
      - sh
      - /wait-for.sh
      - rabbitmq
      - "5672"
      - python
      - "-m"
      - "flower"
      - "--broker=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672//"
      - "flower"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bot_net

  fastapi:
    build:
      context: ../backend
    container_name: fastapi-container
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "8000"
    restart: unless-stopped
    networks:
      - bot_net
  aiobot:
    build:
      context: ../bot
    container_name: aiobot-container
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - bot_net
    restart: always
  celery:
    build:
      context: ../backend
    container_name: celery-container
    command: celery -A app.core.celery_app worker --loglevel=info
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bot_net
  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    container_name: nginx-container
    ports:
      - "80:80"
    depends_on:
      - fastapi
    networks:
      - bot_net
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-container
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - bot_net
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:


networks:
  bot_net:
    driver: bridge
