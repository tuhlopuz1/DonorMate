services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-container
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DBNAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DBNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bot_net
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    # healthcheck:
    #   test: ["CMD", "rabbitmq-diagnostics", "ping"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5
    networks:
      - bot_net
    mem_limit: 1g
  redis:
    image: redis:7-alpine
    container_name: redis-container
    volumes:
      - redis_data:/var/lib/redis/data
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --bind 0.0.0.0
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bot_net

  fastapi:
    image: asdfrewqha/donormate:latest
    container_name: fastapi-container
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "8000"
    restart: unless-stopped
    networks:
      - bot_net
  aiobot:
    image: asdfrewqha/donormate_bot:latest
    container_name: aiobot-container
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - fastapi
    networks:
      - bot_net
  celery:
    image: asdfrewqha/donormate:latest
    container_name: celery-container
    command: celery -A app.core.celery_app worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - fastapi
    restart: unless-stopped
    networks:
      - bot_net
  nginx:
    image: nginx:latest
    container_name: nginx-container
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - fastapi
    networks:
      - bot_net

volumes:
  postgres_data:
  redis_data:

networks:
  bot_net:
    driver: bridge